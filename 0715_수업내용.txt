//----- day9

coderecipe@naver.com

# 공유자료실 안내 
http://naver.me/5yrL5iM3
비밀번호 : 0703 

-----------------
수업 중간 결과파일 

http://223.195.30.136
naver.me/5ZTf4G8D

-------------------------
mySQL DB 확인 

1) mySQL 워크벤치 실행 
  local 클릭해서 서버 실행 

2) 파이참에서 
  [File]-[Settings] 
3) Project ~ 카테고리 클릭 
4) [Project Interpreter] 클릭 
5) [+] 클릭 
   PyMySQL 검색후 설치 
   [Install Package] +

6) 공유폴더에서 mySQL_test.py
  다운로드후 작업폴더에 붙이기 
  실행해서 데이타가 잘 나오는지 확인 

-------------------

자료다운로드 : 
  db 폴더의 sample.zip 

1. 자료받기 
2. 작업폴더아래의 db 폴더 생성 
   압축해제 

db 위치 >> c:/pyclass/db 

----------------
# 공유자료실 안내 
http://naver.me/5yrL5iM3
비밀번호 : 0703 

-----------------
수업 중간 결과파일 

http://223.195.30.136



----------------
Workbench 환경 설정 

// Safe Updates 체크 해제 - p33
[Edit]-[Pereference..] 

// SQL Editor - 폰트 설정 

[Edit]-[Pereference..] 
[Color ~] 


// sql 패스 추가 

1) 관리자 명령 프롬프트로 터미널 창 실행 
2) 터미널 모드 : p37 6-2 소스 참조 

SETX PATH "%PATH%;C:\Program Files\MySQL\MySQL Server 8.0\bin"
  
SQL 경로를 아래로 변경 
C:\Program Files\MySQL\MySQL Server 8.0\bin

// 컴퓨터 재부팅 
shutdown -r -t 0 

3) 윈도우키 + R
cmd 

# 명령으로 mysql 접속 
mysql -u root -p 
비밀번호 

mysql>

4) mysql 종료 
exit 입력

// 샘플 DB 설치 - p37 

1) employees.zip 다운로드후 압축해제 
  db 폴더에 파일목록이 있는지 확인 

2) 관리자모드의 명령프롬프트 접속 
  터미널창 접속 

3) 디렉토리 이동 
cd employees폴더경로 

cd c:/pyclass/db 

4) 명령으로 mysql 접속 
mysql -u root -p 
비밀번호입력 

5) employees.sql  임포트 
mysql>source employees.sql 

6) employees 데이타베이스 목록 
mysql> show databases; 

employees 목록 확인 

7)접속 종료 
exit 

// SQL이란?
데이타베이스 조작명령
관계형데이타베이스의 표준 언어 

//워크벤치란?
workbench : gui 방식으로 데이타베이스 관리 소프트웨어 

// 워크벤치에서 데이타베이스 접속하기 
-- USE 데이타베이스명;

워크벤치의 [Schemas] 탭 클릭 
데이타베이스 목록 더블클릭 
데이타베이스가 진하게 표시 

// SQL 스크립트 파일 저장하기 
SQL 에디터창
   Ctrl+S
   파일명.sql


// SQL 주석 

-- 한줄 주석 

/*
 여러줄
 주석 
*/


// SQL 명령은?
블록 지정후 
[Ctrl]+[ENter] / [Ctrl]+[Shift]+[Enter]

// 테이블 목록 확인하기 
SHOW TABLES;


// 테이블 정보 조회 
SHOW TABLE STATUS;

-- 테이블 구조 확인하기 
-- DESC 테이블명;
-- DESCRIBE 테이블명;

DESCRIBE salaries;
DESC salaries;

// SQL 명령어를 대문자로 변경하기 
p154
[Edit]-[Format]-[UPCASE KEYWORDS] 선택 
[Edit]-[Preferences] 의 [SQL Editor] 클릭 
[Use UPPERCASE Keywords on completion] 선택

// SELECT 문 

SELECT 컬럼명... / * FROM 테이블명 
LIMIT 레코드수 


// 선택레코드를 csv/txt/html 파일로 저장하기 
SELECT 명령 실행 
[RESULT Grid] 창에 실행에 대한 레코드표시 확인 
저장아이콘 클릭후 폴더경로와 파일 경로 지정 


// [RESULT Grid] 창에서 필터링 
필터입력란 이용 

// 퀴즈 
1) world 데이타베이스로 변경하기

2) city 테이블의 구조 확인하기.
   몇개의 컬럼명으로 이루어져 있을까요?
 
3) city 테이블에서 10개만 레코드 출력하기 

4) 3번의 테이블 목록을 city_10.csv 파일로 저장하기 

5) city 테이블에서 'CountryCode' 컬럼명이 NLD인 
   레코드만 출력한 후 city_nld.txt 파일로 저장하기 

--------------------------------
# 공유자료실 안내 
http://naver.me/5yrL5iM3
비밀번호 : 0703 

// world 없는 분만 
world db 저장하기 - db 폴더에 있음 


--------------------------------
Chapter4. 데이타베이스 모델링 

데이타베이스 기획 -> p123 참조 

1) 모델링 작업 
  워크벤치 [File]-[New Model] 
  DB 이름 
  다이어그램 생성 
  테이블 생성 
2) 실제 데이타베이스와 테이블 생성 
   [Database]-[Forward Engineer] 명령 실행 
3) 모든 탭 닫기 
4) [Schema] 탭에 새로고침 아이콘 클릭 
5) 생성된 DB와 테이블 확인 

USE shopDB;
DESC buyTBL;
DESC userTBL;

--------------------------------
// 기존 존재하는 데이터베이스 이용해 다이어그램 작성하기 p130 

1) world 데이타베이스 목록 확인 
   
2) Workbench 메뉴의 [Database] - [Reverse Engineer] 선택
3) [Select the schemas below you want to include:]
다이어그램으로 만들고자하는 데이타베이스 선택 
world 선택 
[Next]

4) 변환 결과를 다이어그램으로 확인후 저장 
  [Ctrl]+[S]

5) 상단에서 다이어그램 창 닫기 


--------------------------------
-- sqlDB.sql 

-- 초기화 
DROP DATABASE IF EXISTS sqlDB; 

-- 데이타베이스 생성 
CREATE DATABASE sqlDB;

-- sqlDB로 변경 
USE sqlDB;

-- 회원 테이블
CREATE TABLE userTbl 
( userID  	CHAR(8) NOT NULL PRIMARY KEY, -- 아이디(PK)
  name    	VARCHAR(10) NOT NULL, -- 이름
  birthYear   INT NOT NULL,  -- 출생년도
  addr	  	CHAR(2) NOT NULL, -- 지역
  mobile1	CHAR(3), -- 휴대폰의 국번
  mobile2	CHAR(8), -- 휴대폰의 나머지 전화번호(하이픈제외)
  height    SMALLINT,  -- 키
  mDate    	DATE  -- 회원 가입일
);
-- 테이블 구조 확인 
DESC usertbl;

-- 회원 구매 테이블
CREATE TABLE buyTbl 
(  num 		INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
   userID  	CHAR(8) NOT NULL, -- 아이디(FK)
   prodName 	CHAR(6) NOT NULL, --  물품명
   groupName 	CHAR(4)  , -- 분류
   price     	INT  NOT NULL, -- 단가
   amount    	SMALLINT  NOT NULL, -- 수량
   -- usrTbl의 userID를 참조. 외래키로 정의 
   FOREIGN KEY (userID) REFERENCES userTbl(userID)
);
-- 테이블 구조 확인 
DESC buyTbl;

-- 데이타 삽입 
INSERT INTO userTbl VALUES('LSG', '이승기', 1987, '서울', '011', '1111111', 182, '2008-8-8');
INSERT INTO userTbl VALUES('KBS', '김범수', 1979, '경남', '011', '2222222', 173, '2012-4-4');
INSERT INTO userTbl VALUES('KKH', '김경호', 1971, '전남', '019', '3333333', 177, '2007-7-7');
INSERT INTO userTbl VALUES('JYP', '조용필', 1950, '경기', '011', '4444444', 166, '2009-4-4');
INSERT INTO userTbl VALUES('SSK', '성시경', 1979, '서울', NULL  , NULL      , 186, '2013-12-12');
INSERT INTO userTbl VALUES('LJB', '임재범', 1963, '서울', '016', '6666666', 182, '2009-9-9');
INSERT INTO userTbl VALUES('YJS', '윤종신', 1969, '경남', NULL  , NULL      , 170, '2005-5-5');
INSERT INTO userTbl VALUES('EJW', '은지원', 1972, '경북', '011', '8888888', 174, '2014-3-3');
INSERT INTO userTbl VALUES('JKW', '조관우', 1965, '경기', '018', '9999999', 172, '2010-10-10');
INSERT INTO userTbl VALUES('BBK', '바비킴', 1973, '서울', '010', '0000000', 176, '2013-5-5');

-- 테이블 조회 
SELECT * FROM usertbl;

-- 첫번째 컬럼명이 NULL인 이유: 자동숫자증감 AUTO_INCREMENT
INSERT INTO buyTbl VALUES(NULL, 'KBS', '운동화', NULL   , 30,   2);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '노트북', '전자', 1000, 1);
INSERT INTO buyTbl VALUES(NULL, 'JYP', '모니터', '전자', 200,  1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '모니터', '전자', 200,  5);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '청바지', '의류', 50,   3);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '메모리', '전자', 80,  10);
INSERT INTO buyTbl VALUES(NULL, 'SSK', '책'    , '서적', 15,   5);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책'    , '서적', 15,   2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '청바지', '의류', 50,   1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL   , 30,   2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책'    , '서적', 15,   1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL   , 30,   2);

-- 테이블 조회 
-- 데이타 각각 10개씩 잘 들어갔는지 확인 
SELECT * FROM usertbl;
SELECT * FROM buytbl; -- 순차적으로 번호 들어갔는지 확인 

-- where 절로 조건에 맞는 레코드 출력하기 
-- SELECT 컬러명1, 컬럼명2.. 또는 * FROM 테이블명 WHERE 조건절
-- WHERE 조건절 : 비교연산자(>,<,=, >=, <=) 논리연산자(AND, OR, NOT)

-- userTbl 테이블에서 김경호만 출력하기 
SELECT * FROM userTbl WHERE name = '이승기';
SELECT name, addr, userID FROM userTbl WHERE name = '이승기';


-- userTbl 테이블에서 birthYear 이 1970 보다 크거나 같고 height 이 182보다 크다 
-- WHERE 조건1 AND 조건2 : 조건 모두 만족  
SELECT * FROM userTbl WHERE birthYear >= 1970 AND height >= 182;

-- userTbl 테이블에서 birthYear 이 1970 보다 이상이거나  
-- height 이 182보다 큰 레코드에서 
-- userID, Name 컬럼의 레코드 출력 
-- WHERE 조건1 OR 조건2 : 조건1이 만족하거나 조건2가 만족하는 레코드 
SELECT userID, Name FROM userTbl 
	WHERE birthYear >= 1970 OR height >= 182;

-- userTbl 테이블에서 height이 182미만인 레코드 
SELECT userID, height FROM userTbl WHERE NOT  height>=182;   

-- 범위를 지정할 때 사용 
-- WHERE 컬럼명 BETWEEN 값1 AND 값2
-- userTbl 테이블에서 height이 180~183 인 레코드에서 
-- userID, Name 컬럼의 레코드 표시 
SELECT * FROM userTbl 
	WHERE height >= 180 AND height <= 183;
    
SELECT * FROM userTbl WHERE height BETWEEN 180 AND 183;

-- 비연속적인 조건 
-- 특정값 만족 
-- WHERE 컬럼명 IN (값1, 값2 ...)

SELECT * FROM usertbl WHERE addr = '서울' OR addr = '경남';

SELECT * FROM usertbl WHERE addr IN('서울','경남');

-- 특정글자로 끝나는가? 특정 글자로 시작하는가? %
-- 글자수 _(언더바)
-- 컬럼명안의 글자가 김으로 시작하는가?
-- WHERE 컬럼명 LIKE '김%' 
-- 컬럼명안의 글자가 김으로 시작하고 나머지는 2글자 
-- WHERE 컬럼명 LIKE '김__'

SELECT * FROM usertbl WHERE name LIKE '김%';
SELECT * FROM usertbl WHERE name LIKE '__기';
SELECT * FROM usertbl WHERE name LIKE '_기';

-- 레코드 정렬 
-- SELECT 문 ORDER BY 컬럼명;
-- SELECT 문 ORDER BY 컬럼명 DESC;
SELECT * FROM usertbl ORDER BY name; -- 가나다순 
SELECT * FROM usertbl ORDER BY name DESC; -- 가나다 역순 

-- LIMIT는 마지막에 지정 
SELECT * FROM usertbl LIMIT 5 ORDER BY name;

-- 가나다순으로 5개 출력 
SELECT * FROM usertbl ORDER BY name LIMIT 5 ;

-- WHERE 절은 ORDER BY 앞으로 이동
SELECT * FROM usertbl ORDER BY name WHERE height > 170;
SELECT * FROM usertbl WHERE height > 170 ORDER BY name ;

-- 주의사항 : 순서에 주의 
-- SELECT .. FROM .. WHERE 절 ORDER BY .. LIMIT .. ;

-- 서브 쿼리(Sub Query)란?
-- 쿼리문안에 쿼리문이 들어가는 것 
-- SELECT .. FROM.. WHERE 조건절1 
--		(SELECT .. FROM.. WHERE 조건절2 )
-- 주의사항 : 서브쿼리의 레코드 결과값은 1개로 유일해야한다. 

-- 김경호보다 키가 크거나 같은 사람의 이름과 키를 출력하여라 
-- 김경호의 키?

-- 김경호의 키값을 안다. 
-- userTbl 테이블에서 height 컬럼값이 177 이상인 레코드 
SELECT * FROM userTBL WHERE height  >= 177;

-- 김경호의 키값을 모른다. 
-- 김경호의 키를 알수 있는 쿼리문 제작 - step1 
SELECT height FROM userTbl WHERE Name = '김경호';
-- step2 : 메인 쿼리에 서브 쿼리를 삽입 
/* SELECT * FROM userTBL 
	WHERE height  > 김경호의키값 */
SELECT * FROM userTBL 
	WHERE height  > (SELECT height FROM userTbl WHERE Name = '김경호');

-- 서브쿼리가 에러가 나는 경우 
SELECT * FROM userTbl WHERE addr = '서울';

-- 주소지가 서울인 회원보다 키가 큰 사람 
-- 에러 발생 : 서브쿼리의 결과가 2개이상 
SELECT * FROM userTBL 
	WHERE height  > (SELECT height FROM userTbl WHERE addr = '서울');

-- 서브쿼리의 결과가 2개이상인 경우에는 서브쿼리()앞에 ANY 키워드 삽입     
SELECT * FROM userTBL 
	WHERE height  > ANY(SELECT height FROM userTbl WHERE addr = '서울');    
    
-- 중복제거 : 레코드의 중복 제거 
-- 컬럼명에서 중복제거한 후 표시 
-- SELECT DISTINCT 컬럼명 FROM 테이블명;
SELECT * FROM userTBL;
-- userTBL 테이블에서 거주지 목록만 확인하기 (중복제거)
SELECT DISTINCT addr FROM userTBL;
-- userTBL 테이블에서 모바일 국번의 목록만 확인하기 (중복제거)
SELECT DISTINCT mobile1 FROM userTBL;













// 퀴즈 - 
1) buyTbl 테이블에서 userID가 'KBS'인 레코드 출력하기 
2) buyTbl 테이블에서 groupName이 NULL인 레코드 출력하기 
3) buyTbl 테이블에서 amount가 5보다 큰 레코드 출력하기 
4) buyTbl 테이블에서 prodName이 '청바지' 이거나 '운동화'인 레코드 출력하기 
5) buyTbl 테이블에서 userID에 'K'로 시작하는 레코드 출력하기 
6) buyTbl 테이블에서 prodName이 ??화로 끝나는 레코드 출력하기 
7) buyTbl 테이블에서 수량이 50이상 항목 중 분류가 전자인 레코드 출력하기 
















